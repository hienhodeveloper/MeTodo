//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 10 colors.
  struct color {
    /// Color `app-background-color`.
    static let appBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-background-color")
    /// Color `dim-purple-color`.
    static let dimPurpleColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "dim-purple-color")
    /// Color `header-color`.
    static let headerColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "header-color")
    /// Color `light-blue-color`.
    static let lightBlueColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "light-blue-color")
    /// Color `light-orange-color`.
    static let lightOrangeColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "light-orange-color")
    /// Color `light-purple-color`.
    static let lightPurpleColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "light-purple-color")
    /// Color `sign-in-background-color`.
    static let signInBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "sign-in-background-color")
    /// Color `sign-up-background-color`.
    static let signUpBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "sign-up-background-color")
    /// Color `tab-bar-tint-color`.
    static let tabBarTintColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "tab-bar-tint-color")
    /// Color `title-text-field-color`.
    static let titleTextFieldColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "title-text-field-color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-background-color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "dim-purple-color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dimPurpleColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dimPurpleColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "header-color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func headerColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.headerColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "light-blue-color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightBlueColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightBlueColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "light-orange-color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightOrangeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightOrangeColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "light-purple-color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightPurpleColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightPurpleColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "sign-in-background-color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func signInBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.signInBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "sign-up-background-color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func signUpBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.signUpBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "tab-bar-tint-color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tabBarTintColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tabBarTintColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "title-text-field-color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func titleTextFieldColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.titleTextFieldColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 17 images.
  struct image {
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `books`.
    static let books = Rswift.ImageResource(bundle: R.hostingBundle, name: "books")
    /// Image `briefcase`.
    static let briefcase = Rswift.ImageResource(bundle: R.hostingBundle, name: "briefcase")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `checklist`.
    static let checklist = Rswift.ImageResource(bundle: R.hostingBundle, name: "checklist")
    /// Image `dots`.
    static let dots = Rswift.ImageResource(bundle: R.hostingBundle, name: "dots")
    /// Image `launch-background`.
    static let launchBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch-background")
    /// Image `left-arrow-icon`.
    static let leftArrowIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "left-arrow-icon")
    /// Image `light`.
    static let light = Rswift.ImageResource(bundle: R.hostingBundle, name: "light")
    /// Image `menu-tab-icon`.
    static let menuTabIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-tab-icon")
    /// Image `person`.
    static let person = Rswift.ImageResource(bundle: R.hostingBundle, name: "person")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `task-image`.
    static let taskImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "task-image")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")
    /// Image `uncheck`.
    static let uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "uncheck")
    /// Image `updown`.
    static let updown = Rswift.ImageResource(bundle: R.hostingBundle, name: "updown")
    /// Image `x`.
    static let x = Rswift.ImageResource(bundle: R.hostingBundle, name: "x")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "books", bundle: ..., traitCollection: ...)`
    static func books(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.books, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "briefcase", bundle: ..., traitCollection: ...)`
    static func briefcase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.briefcase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checklist", bundle: ..., traitCollection: ...)`
    static func checklist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checklist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dots", bundle: ..., traitCollection: ...)`
    static func dots(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dots, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch-background", bundle: ..., traitCollection: ...)`
    static func launchBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "left-arrow-icon", bundle: ..., traitCollection: ...)`
    static func leftArrowIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftArrowIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light", bundle: ..., traitCollection: ...)`
    static func light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-tab-icon", bundle: ..., traitCollection: ...)`
    static func menuTabIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuTabIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "person", bundle: ..., traitCollection: ...)`
    static func person(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.person, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "task-image", bundle: ..., traitCollection: ...)`
    static func taskImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.taskImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uncheck", bundle: ..., traitCollection: ...)`
    static func uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "updown", bundle: ..., traitCollection: ...)`
    static func updown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.updown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "x", bundle: ..., traitCollection: ...)`
    static func x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.x, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `TaskTableViewCell`.
    static let taskTableViewCell = _R.nib._TaskTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TaskTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.taskTableViewCell) instead")
    static func taskTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taskTableViewCell)
    }
    #endif

    static func taskTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TaskTableViewCell? {
      return R.nib.taskTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaskTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localization` struct is generated, and contains static references to 11 localization keys.
    struct localization {
      /// en translation: Category
      ///
      /// Locales: en
      static let category = Rswift.StringResource(key: "Category", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Chat Room
      ///
      /// Locales: en, vi
      static let chatRoom = Rswift.StringResource(key: "ChatRoom", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, vi
      static let done = Rswift.StringResource(key: "Done", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, vi
      static let email = Rswift.StringResource(key: "Email", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Go back
      ///
      /// Locales: en
      static let backSignIn = Rswift.StringResource(key: "BackSignIn", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Let's sign in!
      ///
      /// Locales: en, vi
      static let letSignIn = Rswift.StringResource(key: "LetSignIn", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Let's sign up!
      ///
      /// Locales: en, vi
      static let letSignUp = Rswift.StringResource(key: "LetSignUp", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, vi
      static let password = Rswift.StringResource(key: "Password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Sign In
      ///
      /// Locales: en, vi
      static let signIn = Rswift.StringResource(key: "SignIn", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Sign Up
      ///
      /// Locales: en, vi
      static let signUp = Rswift.StringResource(key: "SignUp", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Welcome
      ///
      /// Locales: en, vi
      static let welcome = Rswift.StringResource(key: "Welcome", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)

      /// en translation: Category
      ///
      /// Locales: en
      static func category(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Category", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Category"
        }

        return NSLocalizedString("Category", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Chat Room
      ///
      /// Locales: en, vi
      static func chatRoom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ChatRoom", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "ChatRoom"
        }

        return NSLocalizedString("ChatRoom", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, vi
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, vi
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Go back
      ///
      /// Locales: en
      static func backSignIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BackSignIn", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "BackSignIn"
        }

        return NSLocalizedString("BackSignIn", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Let's sign in!
      ///
      /// Locales: en, vi
      static func letSignIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LetSignIn", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "LetSignIn"
        }

        return NSLocalizedString("LetSignIn", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Let's sign up!
      ///
      /// Locales: en, vi
      static func letSignUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LetSignUp", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "LetSignUp"
        }

        return NSLocalizedString("LetSignUp", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, vi
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Password"
        }

        return NSLocalizedString("Password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Sign In
      ///
      /// Locales: en, vi
      static func signIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignIn", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "SignIn"
        }

        return NSLocalizedString("SignIn", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up
      ///
      /// Locales: en, vi
      static func signUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignUp", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "SignUp"
        }

        return NSLocalizedString("SignUp", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Welcome
      ///
      /// Locales: en, vi
      static func welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Welcome", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Welcome"
        }

        return NSLocalizedString("Welcome", tableName: "Localization", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _TaskTableViewCell.validate()
    }

    struct _TaskTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TaskTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TaskTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaskTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'uncheck' is used in nib 'TaskTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launch-background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch-background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeViewController

      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Main"

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
